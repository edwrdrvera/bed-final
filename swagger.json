{
	"openapi": "3.0.0",
	"info": {
		"title": "Location, Pokemon, Sightings Management API Documentation",
		"version": "1.0.0",
		"description": "This is the API documentation for PokeLog."
	},
	"server": [
		{
			"url": "http://localhost:3000/api/v1",
			"description": "Local Server"
		}
	],
	"components": {
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		},
		"schemas": {
			"LocationInput": {
				"type": "object",
				"required": ["addressName", "terrain"],
				"properties": {
					"addressName": {
						"type": "string",
						"description": "The name of the address or location.",
						"example": "Viridian Forest"
					},
					"terrain": {
						"type": "string",
						"description": "The type of terrain (e.g., forest, mountain, etc.).",
						"example": "Forest"
					},
					"pokemon": {
						"type": "array",
						"description": "A list of Pokémon associated with the location.",
						"items": {
							"type": "string",
							"example": ["pikachu", "bulbasaur"]
						}
					}
				}
			},
			"LocationUpdate": {
				"type": "object",
				"properties": {
					"addressName": {
						"type": "string",
						"description": "The updated name of the address or location.",
						"example": "Viridian Forest"
					},
					"terrain": {
						"type": "string",
						"description": "The updated type of terrain.",
						"example": "Forest"
					},
					"pokemon": {
						"type": "array",
						"description": "A list of Pokémon associated with the location (can be updated).",
						"items": {
							"type": "string",
							"example": ["oddish"]
						}
					}
				}
			},
			"Location": {
				"type": "object",
				"required": ["id", "addressName", "terrain", "pokemon"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier of the location.",
						"example": "location-12345"
					},
					"addressName": {
						"type": "string",
						"description": "The name of the address or location.",
						"example": "Viridian Forest"
					},
					"terrain": {
						"type": "string",
						"description": "The type of terrain (e.g., forest, mountain, etc.).",
						"example": "Forest"
					},
					"pokemon": {
						"type": "array",
						"description": "A list of Pokémon associated with the location.",
						"items": {
							"$ref": "#/components/schemas/PokemonData"
						}
					}
				}
			},
			"PokemonData": {
				"type": "object",
				"required": ["id", "name", "abilities", "type", "height", "weight"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the Pokémon."
					},
					"name": {
						"type": "string",
						"description": "The name of the Pokémon."
					},
					"abilities": {
						"type": "array",
						"items": {
							"type": "object"
						},
						"description": "A list of abilities the Pokémon has."
					},
					"type": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "A list of types the Pokémon belongs to."
					},
					"height": {
						"type": "number",
						"description": "The height of the Pokémon in meters."
					},
					"weight": {
						"type": "number",
						"description": "The weight of the Pokémon in kilograms."
					}
				}
			},
			"PokemonInTeam": {
				"type": "object",
				"required": ["name", "type"],
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the Pokémon in the team."
					},
					"type": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "A list of types the Pokémon belongs to."
					}
				}
			},
			"Sighting": {
				"type": "object",
				"required": ["id", "trainerId", "locationId", "pokemonName", "date"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the sighting."
					},
					"trainerId": {
						"type": "string",
						"description": "The ID of the trainer who made the sighting."
					},
					"locationId": {
						"type": "string",
						"description": "The ID of the location where the sighting occurred."
					},
					"pokemonName": {
						"type": "string",
						"description": "The name of the Pokémon that was sighted."
					},
					"date": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time when the sighting occurred."
					}
				}
			},
			"SightingInput": {
				"type": "object",
				"required": ["trainerId", "locationId", "pokemonName", "date"],
				"properties": {
					"trainerId": {
						"type": "string",
						"description": "The ID of the trainer making the sighting."
					},
					"locationId": {
						"type": "string",
						"description": "The ID of the location where the sighting occurred."
					},
					"pokemonName": {
						"type": "string",
						"description": "The name of the Pokémon sighted."
					},
					"date": {
						"type": "string",
						"format": "date-time",
						"description": "The date and time the sighting took place."
					}
				}
			},
			"SightingUpdate": {
				"type": "object",
				"properties": {
					"trainerId": {
						"type": "string",
						"description": "The updated ID of the trainer making the sighting."
					},
					"locationId": {
						"type": "string",
						"description": "The updated ID of the location where the sighting occurred."
					},
					"pokemonName": {
						"type": "string",
						"description": "The updated name of the Pokémon sighted."
					},
					"date": {
						"type": "string",
						"format": "date-time",
						"description": "The updated date and time the sighting occurred."
					}
				}
			},
			"Trainer": {
				"type": "object",
				"required": ["id", "name", "age", "region", "team"],
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the trainer.",
						"example": "12345"
					},
					"name": {
						"type": "string",
						"description": "The name of the Pokémon trainer.",
						"example": "Red"
					},
					"age": {
						"type": "number",
						"description": "The age of the trainer.",
						"example": 10
					},
					"region": {
						"type": "string",
						"description": "The region the trainer belongs to.",
						"example": "Kanto"
					},
					"team": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/PokemonInTeam"
						},
						"description": "A list of Pokémon in the trainer's team."
					}
				}
			},
			"TrainerInput": {
				"type": "object",
				"required": ["name", "age", "region", "team"],
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the new Pokémon trainer.",
						"example": "Red"
					},
					"age": {
						"type": "number",
						"description": "The age of the new trainer.",
						"example": 10
					},
					"region": {
						"type": "string",
						"description": "The region the new trainer belongs to.",
						"example": "Kanto"
					},
					"team": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "A list of Pokémon names (IDs) in the new trainer's team."
					}
				}
			},
			"TrainerUpdate": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "The updated name of the trainer.",
						"example": "Red"
					},
					"age": {
						"type": "number",
						"description": "The updated age of the trainer.",
						"example": 10
					},
					"region": {
						"type": "string",
						"description": "The updated region the trainer belongs to.",
						"example": "Kanto"
					},
					"team": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "A list of updated Pokémon names (IDs) in the trainer's team."
					}
				}
			}
		}
	},
	"paths": {
		"/api/v1/admin/setCustomClaims": {
			"post": {
				"summary": "Set custom claims for a user",
				"description": "Allows an administrator to set custom claims for a Firebase user.",
				"tags": ["Admin"],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"required": "id uid claims",
								"properties": {
									"id": {
										"type": "string",
										"description": "The ID of the trainer to whom the claims will be assigned.",
										"example": "trainer-123"
									},
									"uid": {
										"type": "string",
										"description": "The Firebase UID of the user whose claims are to be set.",
										"example": "exampleUID"
									},
									"claims": {
										"type": "object",
										"description": "An object containing the custom claims to set. Typically includes a 'role'.",
										"example": {
											"role": "manager"
										},
										"properties": {
											"role": {
												"type": "string",
												"description": "The role to assign to the user."
											}
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Custom claims set successfully."
					},
					"400": {
						"description": "Bad Request - Invalid input data (e.g., missing uid or claims)."
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid."
					},
					"403": {
						"description": "Forbidden - The authenticated user is not an administrator."
					},
					"404": {
						"description": "Not Found - The user specified by the UID does not exist."
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/api/v1/locations": {
			"post": {
				"summary": "Create a new location",
				"description": "Create a new location with the provided details.",
				"tags": ["Locations"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"description": "Location details",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LocationInput"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Location created successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "success"
										},
										"message": {
											"type": "string",
											"example": "Location created successfully"
										},
										"data": {
											"$ref": "#/components/schemas/Location"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request due to invalid data"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user is not authorized to create a location"
					},
					"404": {
						"description": "Not Found - The specified location does not exist"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"get": {
				"summary": "Get all locations",
				"description": "Retrieves a list of all locations stored in the system.",
				"tags": ["Locations"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "A list of all locations",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Location"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/api/v1/locations/{id}": {
			"get": {
				"summary": "Get a location by ID",
				"description": "Retrieve a specific location by its ID.",
				"tags": ["Locations"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the location to retrieve.",
						"example": "location-12345"
					}
				],
				"responses": {
					"200": {
						"description": "A location with the specified ID",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Location"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Location not found - The specified location does not exist"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"put": {
				"summary": "Update a location by ID",
				"description": "Update the details of an existing location by its ID.",
				"tags": ["Locations"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the location to update."
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LocationUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Location updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Location"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request- Invalid input data"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Location not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"delete": {
				"summary": "Delete a location by ID",
				"description": "Delete a specific location by its ID.",
				"tags": ["Locations"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the location to delete."
					}
				],
				"responses": {
					"200": {
						"description": "Location deleted successfully"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Location not found -"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/api/v1/sightings": {
			"post": {
				"summary": "Create a new sighting",
				"description": "Create a new Pokémon sighting with the provided details.",
				"tags": ["Sightings"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"description": "Sighting details",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SightingInput"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Sighting created successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "success"
										},
										"message": {
											"type": "string",
											"example": "Sighting created successfully"
										},
										"data": {
											"$ref": "#/components/schemas/Sighting"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request due to invalid data"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"get": {
				"summary": "Get all Pokemon sightings",
				"description": "Retrieve a list of all Pokémon sightings recorded in the system.",
				"tags": ["Sightings"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "A list of all sightings",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Sighting"
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/api/v1/sightings/{id}": {
			"get": {
				"summary": "Get a sighting by ID",
				"description": "Retrieve a specific sighting by its ID.",
				"tags": ["Sightings"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the sighting to retrieve.",
						"example": "sighting-123"
					}
				],
				"responses": {
					"200": {
						"description": "A sighting with the specified ID",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Sighting"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Sighting not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"put": {
				"summary": "Update a sighting by ID",
				"description": "Update the details of an existing sighting by its ID.",
				"tags": ["Sightings"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the sighting to update.",
						"example": "sighting-123"
					}
				],
				"requestBody": {
					"required": true,
					"description": "Updated sighting details",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SightingUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Sighting updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "success"
										},
										"message": {
											"type": "string",
											"example": "Sighting Updated"
										},
										"data": {
											"$ref": "#/components/schemas/Sighting"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad request due to invalid input"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Sighting not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"delete": {
				"summary": "Delete a sighting by ID",
				"description": "Delete a specific sighting by its ID.",
				"tags": ["Sightings"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the sighting to delete.",
						"example": "sighting-123"
					}
				],
				"responses": {
					"200": {
						"description": "Sighting deleted successfully"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"402": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Sighting not found"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/api/v1/trainers": {
			"post": {
				"summary": "Create a new trainer",
				"description": "Create a new trainer with the provided data",
				"tags": ["Trainers"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TrainerInput"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Trainer created successfully"
					},
					"400": {
						"description": "Bad request due to invalid data"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user is not authorized to create a trainer"
					},
					"404": {
						"description": "Not Found - The specified trainer does not exist"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"get": {
				"summary": "Get all trainers",
				"description": "Retrieve a list of all trainers",
				"tags": ["Trainers"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"responses": {
					"200": {
						"description": "A list of trainers"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Not Found - The specified trainer does not exist"
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		},
		"/api/v1/trainers/{id}": {
			"get": {
				"summary": "Get a trainer by ID",
				"description": "Retrieve details of a specific trainer by their ID",
				"tags": ["Trainers"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "The unique ID of the trainer to retrieve",
						"example": "trainer-123"
					}
				],
				"responses": {
					"200": {
						"description": "Trainer details found"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role"
					},
					"404": {
						"description": "Not Found - Trainer with specified ID does not exist."
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			},
			"put": {
				"summary": "Update a trainer by ID",
				"description": "Update an existing trainer's details",
				"tags": ["Trainers"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "ID of the trainer to update",
						"example": "trainer-123"
					}
				],
				"requestBody": {
					"required": true,
					"description": "Data to update for the trainer.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TrainerUpdate"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Trainer updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Trainer"
								}
							}
						}
					},
					"400": {
						"description": "Bad request due to invalid data"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user is not authorized to update the trainer"
					},
					"404": {
						"description": "Not Found - Trainer with specified ID does not exist"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			},
			"delete": {
				"summary": "Delete a trainer by ID",
				"description": "Permanently remove a trainer from the database.",
				"tags": ["Trainers"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string"
						},
						"description": "ID of the trainer to delete",
						"example": "trainer-123"
					}
				],
				"responses": {
					"200": {
						"description": "Trainer deleted successfully"
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid"
					},
					"403": {
						"description": "Forbidden - The authenticated user is not authorized to delete the trainer"
					},
					"404": {
						"description": "Not Found - Trainer with specified ID does not exist"
					},
					"500": {
						"description": "Internal server error"
					}
				}
			}
		},
		"/api/v1/users/{uid}": {
			"get": {
				"summary": "Get user profile by UID",
				"description": "Retrieve the profile of a user by their UID.",
				"tags": ["Users"],
				"security": [
					{
						"bearerAuth": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "uid",
						"required": true,
						"description": "The UID of the user whose profile is to be retrieved.",
						"example": "exampleUID"
					}
				],
				"responses": {
					"200": {
						"description": "User profile retrieved successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"example": "success"
										},
										"data": {
											"type": "object",
											"properties": {
												"userId": {
													"type": "string",
													"description": "The Firebase UID of the user.",
													"example": "exampleUID"
												},
												"roles": {
													"type": "string",
													"description": "The role assigned to the user.",
													"example": "admin"
												}
											}
										},
										"message": {
											"type": "string",
											"example": "User profile for user ID: exampleUID"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Authentication token is missing or invalid."
					},
					"403": {
						"description": "Forbidden - The authenticated user does not have the required role."
					},
					"404": {
						"description": "Not Found - The user specified by the UID does not exist."
					},
					"500": {
						"description": "Internal Server Error"
					}
				}
			}
		}
	},
	"tags": []
}
